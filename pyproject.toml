[tool.poetry]
name = "async-sqlalchemy2-fastapi"
version = "0.1.0"
description = "Test project for async sqlalchemy and fastapi"
authors = ["Grant Ramsay (seapagan) <seapagan@gmail.com>"]
license = "MIT"
readme = "README.md"

[tool.poetry.dependencies]
python = ">=3.9,<4.0"
fastapi = { extras = ["all"], version = "^0.103.0" }
asyncpg = "^0.29.0"
sqlalchemy = { extras = ["asyncio"], version = "^2.0.16" }
uvicorn = { extras = ["standard"], version = "^0.22.0" }
aiosqlite = "^0.19.0"

[tool.poetry.group.dev.dependencies]
# linting and formatting tools
mypy = "^1.8.0"
pre-commit = "^3.4.0"
pymarkdownlnt = "^0.9.14"
ruff = "^0.1.11"

# for typing
asyncpg-stubs = "^0.29.1"

# changelog generation
github-changelog-md = "^0.8.0"

# docs
mkdocs = "^1.4.3"
mkdocs-material = "^9.1.16"
mkdocs-minify-plugin = "^0.6.4"
pymdown-extensions = "^10.0.1"
pygments = "^2.15.1"

# adds ability to run tasks from pyproject.toml
poethepoet = "^0.20.0"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poe.tasks]
# setup PoeThePoet tasks
serve = "uvicorn main:app --reload"

pre.cmd = "pre-commit run --all-files"
pre.help = "Run pre-commit checks"
mypy.cmd = "mypy . --strict"
mypy.help = "Run mypy checks"
format.help = "Format code with Ruff"
format.cmd = "ruff format ."
ruff.help = "Run Ruff checks"
ruff.cmd = "ruff check ."
markdown.cmd = "pymarkdown --strict-config scan  -r docs/**/*.md"
markdown.help = "Run markdown checks"

[tool.pymarkdown]
plugins.md014.enabled = false
plugins.md046.enabled = false
plugins.md033.allowed_elements = "!--,![CDATA[,!DOCTYPE,swagger-ui"
plugins.md013.enabled = false

[tool.ruff]
line-length = 80
select = ["ALL"] # we are being very strict!
ignore = [
  "ANN101",
  "PGH003",
  "FBT002",
  "FBT003",
  "B006",
] # These rules are too strict even for us 😝
extend-ignore = [
  "COM812", # ignored for ruff formatting
  "ISC001", # ignored for ruff formatting
  "T201",   # temporary ignore for now, will remove when migrate to logging
]

src = ["app"]
extend-exclude = [
  "app/migrations", # auto-generated by alembic so we don't need to check them
]
target-version = "py39" # minimum python version supported

[tool.ruff.format]
indent-style = "space"
quote-style = "double"

[tool.ruff.pep8-naming]
classmethod-decorators = ["pydantic.validator", "pydantic.root_validator"]

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.extend-per-file-ignores]
"tests/**/*.py" = [
  "S101",   # we can (and MUST!) use 'assert' in test files.
  "ANN001", # annotations for fixtures are sometimes a pain for test files.
  "ARG001", # sometimes fixtures are not physically used but have side-effects
  "ARG002", # as above
  "TD003",
  "FIX002",
  "RUF012",
]

[tool.ruff.flake8-bugbear]
extend-immutable-calls = [
  "fastapi.Depends",
  "fastapi.params.Depends",
  "fastapi.Query",
  "fastapi.params.Query",
]

[tool.ruff.lint.flake8-builtins]
builtins-ignorelist = ["id"]

[tool.ruff.isort]
known-first-party = ["app"]

[tool.ruff.pyupgrade]
keep-runtime-typing = true

[tool.mypy]
python_version = "3.9"
exclude = ["app/migrations/"]

[[tool.mypy.overrides]]
disable_error_code = ["method-assign", "no-untyped-def", "attr-defined"]
module = "tests.*"

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = "decouple.*"
