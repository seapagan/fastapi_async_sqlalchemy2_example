{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Async SQLAlchemy 2 with FastAPI","text":""},{"location":"#introduction","title":"Introduction","text":"<p>I've been using FastAPI and SQLAlchemy combined with encode/databases for a while now.</p> <p>The <code>databases</code> package is a great wrapper around <code>SQLAlchemy</code> that allows you to use async/await with SQLAlchemy.</p> <p>However, this does not seem be be actively maintained anymore. So I decided to give the new Async SQLAlchemy a try instead.</p> <p>This repository contains a very simple example how to use FastAPI with Async SQLAlchemy 2.0, in <code>ORM</code> mode. I'll probably add an example for <code>Core</code> mode also.</p>"},{"location":"explanation/","title":"Code Explanation","text":"<p>Under Construction</p> <p>This section is still to be written.</p>"},{"location":"license/","title":"License","text":"<p>This project is licensed under the terms of the MIT license.</p> <pre><code>MIT License\n\nCopyright (c) 2023-2024 Grant Ramsay\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre>"},{"location":"usage/","title":"Using this example","text":""},{"location":"usage/#installation","title":"Installation","text":"<p>Clone the repository from here and install the dependencies. This project uses Poetry for dependency management which should be installed on your system first.</p> <pre><code>poetry install\n</code></pre> <p>Then switch to the virtual environment:</p> <pre><code>poetry shell\n</code></pre>"},{"location":"usage/#usage","title":"Usage","text":"<p>Run the server using <code>Uvicorn</code>:</p> <pre><code>uvicorn main:app --reload\n</code></pre> <p>You can also run the server by just executing the <code>main.py</code> file:</p> <p><code>console python main.py</code></p> <p>Then open your browser at http://localhost:8000.</p> <p>There is only one endpoint available: <code>/users</code>. It returns a list of all users for a <code>GET</code> request and creates a new user for a <code>POST</code> request.</p>"},{"location":"usage/#local-postgres-server-using-docker","title":"Local Postgres server using Docker","text":"<p>This example uses PostgreSQL as the database. If you dont have a local PostgreSQL database running, you can start one with Docker using the following command:</p> <pre><code>docker run \\\n  --rm   \\\n  --name  postgres \\\n  -p 5432:5432 \\\n  -e POSTGRES_USER=postgres \\\n  -e POSTGRES_PASSWORD=postgres \\\n  -e POSTGRES_DB=postgres \\\n  -d postgres\n</code></pre> <p>This will run a PostgreSQL database in a Docker container in the background. When you are finished and want to stop the database, run:</p> <pre><code>docker stop postgres\n</code></pre> <p>If needed, you can connect to the database managment by :</p> <pre><code>docker exec -it postgres psql -U postgres\n</code></pre> <p>This will allow you to edit or delete the database or records.</p>"},{"location":"usage/#use-sqlite-instead-of-postgresql","title":"Use SQLite instead of PostgreSQL","text":"<p>For testing purposes, you can also use SQLite instead of PostgreSQL. To do so, open the <code>db.py</code> file and comment out the PostgreSQL database in the <code>DATABASE_URL</code> environment variable and uncomment the SQLite database.</p> <pre><code># DATABASE_URL = \"postgresql+asyncpg://postgres:postgres@localhost/postgres\"\nDATABASE_URL = \"sqlite+aiosqlite:///./test.db\"\n</code></pre>"}]}